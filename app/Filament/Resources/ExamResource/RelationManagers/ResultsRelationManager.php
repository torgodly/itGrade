<?php

namespace App\Filament\Resources\ExamResource\RelationManagers;

use App\Actions\AnalyzePaperAction;
use App\Filament\Exports\ResultExporter;
use App\Jobs\ProcessExamPapersJob;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists\Components\Grid;
use Filament\Infolists\Components\IconEntry;
use Filament\Infolists\Components\SpatieMediaLibraryImageEntry;
use Filament\Infolists\Components\Tabs;
use Filament\Infolists\Components\TextEntry;
use Filament\Notifications\Notification;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Actions\ExportAction;
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;
use Filament\Tables\Table;
use Icetalker\FilamentTableRepeatableEntry\Infolists\Components\TableRepeatableEntry;
use Illuminate\Support\HtmlString;
use Illuminate\Validation\Rules\Unique;
use ZipArchive;

class ResultsRelationManager extends RelationManager
{
    protected static string $relationship = 'results';

    public function isReadOnly(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('id')
                    ->required()
                    ->maxLength(255),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('student.code')
                    ->label('Student Code')
                    ->badge()
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('student.name')
                    ->label('Student Name')
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('correct_answers_count')
                    ->label('Correct Answers')
                    ->formatStateUsing(fn($state) => new HtmlString(
                        "<span style='font-size: 1.1em; font-weight: bold'>{$state}</span> / " . count($this->getOwnerRecord()->questions)
                    ))
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('score')
                    ->label('Score')
                    ->formatStateUsing(fn($record) => new HtmlString(
                        "<span style='font-size: 1.1em; font-weight: bold'>{$record->score}</span> / " . $this->getOwnerRecord()->total_score)
                    )
                    ->sortable()
                    ->searchable(),

                SpatieMediaLibraryImageColumn::make('exam_paper')
                    ->collection('exam_paper'),
                SpatieMediaLibraryImageColumn::make('exam_answers')
                    ->collection('exam_answers')

            ])
            ->filters([
                //
            ])
            ->headerActions([
                ExportAction::make()
                    ->label('Export Results')
                    ->translateLabel()
                    ->exporter(ResultExporter::class),
                Tables\Actions\CreateAction::make()
                    ->label('Add Exam Result')
                    ->translateLabel()
                    ->slideOver()
                    ->form([
                        Forms\Components\Select::make('student_id')
                            ->relationship('student', 'name')
                            ->searchable(['name', 'code'])
                            ->unique(modifyRuleUsing: function (Unique $rule) {
                                return $rule->where('exam_id', $this->getOwnerRecord()->id);
                            })
                            ->preload()
                            ->required(),
                        Forms\Components\Repeater::make('answers')
                            ->deletable(false)
                            ->reorderable(false)
                            ->default(fn($record) => collect($this->getOwnerRecord()->questions)->map(function ($answer, $index) {
                                return [
                                    'id' => $answer['id'], // Assuming the index starts from 0
                                    'question' => $answer['question'],
                                    'answer' => 'A',
                                    'score' => $answer['score'], // Default score
                                ];
                            }))
                            ->addable(false)
                            ->columnSpanFull()
                            ->live()
                            ->schema([
                                Forms\Components\Grid::make(3)->schema([
                                    Forms\Components\TextInput::make('question')
                                        ->label('Question')
                                        ->readOnly()
                                        ->dehydrated(false)
                                        ->live()
                                        ->required()
                                        ->maxLength(255),
                                    Forms\Components\ToggleButtons::make('answer')
                                        ->inline()
                                        ->default('A')
                                        ->options([
                                            'A' => 'A',
                                            'B' => 'B',
                                            'C' => 'C',
                                            'D' => 'D',
                                            'E' => 'E',
                                        ])->required(),
                                    Forms\Components\TextInput::make('score')
                                        ->readOnly()
                                        ->numeric()
                                        ->required()
                                        ->dehydrated(false)
                                        ->minValue(0)
                                        ->maxValue(100)
                                        ->default(0),
                                ])
                            ])

                    ])
                    ->action(function ($data) {
                        $this->getOwnerRecord()->results()->updateOrCreate(
                            [
                                'student_id' => $data['student_id'],
                                'answers' => $data['answers'],
                                'status' => 'pending',
                                'submitted_at' => now(),
                            ]
                        );
                        Notification::make()
                            ->title('Exam Result Added')
                            ->body('The exam result has been successfully added.')
                            ->success()
                            ->send();
                        // Logic to add exam result
                    })
                    ->icon('heroicon-o-plus'),

                Tables\Actions\Action::make('upload_exam_papers')
                    ->label('Upload Exam Papers')
                    ->translateLabel()
                    ->slideOver()
                    ->form([
                        Forms\Components\FileUpload::make('exam_papers')
                            ->label('Upload Exam Papers')
                            ->multiple()
                            ->required()
                            ->helperText('Upload images or a ZIP file containing exam papers')
                            ->disk('public')
                            ->rules(['mimes:jpg,jpeg,png,zip'])

                    ])
                    ->action(function ($data) {
                        $examPapers = $data['exam_papers'];

                        foreach ($examPapers as $examPaper) {
                            $filePath = storage_path('app/public/' . $examPaper);

                            if (!file_exists($filePath)) {
                                throw new \Exception("File does not exist: " . $filePath);
                            }

                            // If it's a zip, extract and loop through files
                            if (strtolower(pathinfo($filePath, PATHINFO_EXTENSION)) === 'zip') {
                                $extractPath = storage_path('app/tmp/exams/' . uniqid('', true));

                                if (!mkdir($extractPath, 0777, true) && !is_dir($extractPath)) {
                                    throw new \RuntimeException(sprintf('Directory "%s" was not created', $extractPath));
                                }

                                $zip = new ZipArchive();
                                if ($zip->open($filePath) === true) {
                                    $zip->extractTo($extractPath);
                                    $zip->close();

                                    $files = new \RecursiveIteratorIterator(
                                        new \RecursiveDirectoryIterator($extractPath, \FilesystemIterator::SKIP_DOTS)
                                    );

                                    foreach ($files as $file) {
                                        if ($file->isFile() && in_array(strtolower($file->getExtension()), ['jpg', 'jpeg', 'png'])) {
                                            $result = $this->getOwnerRecord()->results()->create([
                                                'status' => 'pending',
                                                'submitted_at' => now(),
                                            ]);

                                            $result->addMedia($file->getPathname())->toMediaCollection('exam_paper');
                                        }
                                    }
                                } else {
                                    throw new \Exception("Failed to open zip file: " . $filePath);
                                }
                            } else {
                                // Normal image
                                $result = $this->getOwnerRecord()->results()->create([
                                    'status' => 'pending',
                                    'submitted_at' => now(),
                                ]);

                                $result->addMedia($filePath)->toMediaCollection('exam_paper');
                            }
                        }
                    }),


                //Process Exam Papers
                Tables\Actions\Action::make('process_all_exam_papers')
                    ->label('Process All Exam Papers')
                    ->translateLabel()
                    ->slideOver()
                    ->action(function () {
                        ProcessExamPapersJob::dispatch($this->ownerRecord->id);
                        Notification::make()
                            ->title('Processing Started')
                            ->body('The exam papers are being processed in the background. Check back later for results.')
                            ->success()
                            ->send();
                    })
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->modalHeading(fn($record) => __('Preview Answers for :student', ['student' => $record->student?->name]))
                    ->infolist([
                        Tabs::make('Tabs')
                            ->contained(false)
                            ->tabs([
                                Tabs\Tab::make('answers')
                                    ->schema([
                                        TableRepeatableEntry::make('preview_answers')
                                            ->hiddenLabel()
                                            ->schema([
                                                TextEntry::make('question_text'),
                                                TextEntry::make('correct_answer')
                                                    ->badge(),
                                                TextEntry::make('student_answer')
                                                    ->badge(),
                                                IconEntry::make('is_correct')
                                                    ->boolean()
                                            ]),
                                    ]),
                                Tabs\Tab::make('exam_papers')
                                    ->schema([
                                        Grid::make()->schema([
                                            SpatieMediaLibraryImageEntry::make('exam_paper')
                                                ->height(600)
                                                ->extraImgAttributes(['class' => 'bg-gray-100'])
                                                ->collection('exam_paper'),
                                            SpatieMediaLibraryImageEntry::make('exam_answers')
                                                ->height(600)
//                                                ->extraImgAttributes(['class'=> 'object-fit'])
                                                ->collection('exam_answers')
                                        ])
                                    ]),
                            ])


                    ]),


                Tables\Actions\EditAction::make()
                    ->slideOver()
                    ->fillForm(function ($record) {
                        $questions = collect($this->getOwnerRecord()->questions);
                        $answers = collect($record->answers);
                        $answers = $questions->map(function ($question, $index) use ($answers) {
                            $answer = $answers->firstWhere('id', $question['id']);
                            return [
                                'id' => $question['id'],
                                'question' => $question['question'],
                                'answer' => $answer['answer'] ?? 'A',
                                'score' => $question['score'] ?? 0,
                            ];
                        })->values()->toArray();
                        return [
                            'student_id' => $record->student_id,
                            'answers' => $answers,
                        ];
                    })
                    ->form([
                        Forms\Components\Select::make('student_id')
                            ->relationship('student', 'name')
                            ->searchable(['name', 'code'])
                            ->preload()
                            ->required(),
                        Forms\Components\Repeater::make('answers')
                            ->deletable(false)
                            ->reorderable(false)
                            ->addable(false)
                            ->columnSpanFull()
                            ->live()
                            ->schema([
                                Forms\Components\Grid::make(3)->schema([
                                    Forms\Components\TextInput::make('question')
                                        ->label('Question')
                                        ->readOnly()
                                        ->live()
                                        ->required()
                                        ->maxLength(255),
                                    Forms\Components\ToggleButtons::make('answer')
                                        ->inline()
                                        ->default('A')
                                        ->options([
                                            'A' => 'A',
                                            'B' => 'B',
                                            'C' => 'C',
                                            'D' => 'D',
                                            'E' => 'E',
                                        ])->required(),
                                    Forms\Components\TextInput::make('score')
                                        ->readOnly()
                                        ->numeric()
                                        ->required()
                                        ->dehydrated(false)
                                        ->minValue(0)
                                        ->maxValue(100)
                                        ->default(0),
                                ])
                            ])

                    ]),
                Tables\Actions\DeleteAction::make(),

                Tables\Actions\Action::make('process_exam_paper')
                    ->label('Process Exam Paper')
                    ->translateLabel()
                    ->action(fn($record) => (new AnalyzePaperAction($record))->handle())
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }
}
